"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LATEST_VERSION = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _lockfile = _interopRequireDefault(require("lockfile"));

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _findCacheDir = _interopRequireDefault(require("find-cache-dir"));

var _child_process = require("child_process");

var _dedent = _interopRequireDefault(require("dedent"));

var _util = require("util");

var _MongoBinaryDownload = _interopRequireDefault(require("./MongoBinaryDownload"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO: return back `latest` version when it will be fixed in MongoDB distro (for now use 4.0.3 ðŸ˜‚)
// More details in https://github.com/nodkz/mongodb-memory-server/issues/131
// export const LATEST_VERSION = 'latest';
const LATEST_VERSION = '4.0.3';
exports.LATEST_VERSION = LATEST_VERSION;

class MongoBinary {
  static getSystemPath(systemBinary) {
    var _this = this;

    return _asyncToGenerator(function* () {
      let binaryPath = '';

      try {
        yield (0, _util.promisify)(_fs.default.access)(systemBinary);

        _this.debug(`MongoBinary: found sytem binary path at ${systemBinary}`);

        binaryPath = systemBinary;
      } catch (err) {
        _this.debug(`MongoBinary: can't find system binary at ${systemBinary}. ${err.message}`);
      }

      return binaryPath;
    })();
  }

  static getCachePath(version) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.debug(`MongoBinary: found cached binary path for ${version}`);

      return _this2.cache[version];
    })();
  }

  static getDownloadPath(options) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const downloadDir = options.downloadDir,
            platform = options.platform,
            arch = options.arch,
            version = options.version; // create downloadDir if not exists

      yield new Promise((resolve, reject) => {
        (0, _mkdirp.default)(downloadDir, err => {
          if (err) reject(err);else resolve();
        });
      });

      const lockfile = _path.default.resolve(downloadDir, `${version}.lock`); // wait lock


      yield new Promise((resolve, reject) => {
        _lockfile.default.lock(lockfile, {
          wait: 120000,
          pollPeriod: 100,
          stale: 110000,
          retries: 3,
          retryWait: 100
        }, err => {
          if (err) reject(err);else resolve();
        });
      }); // again check cache, maybe other instance resolve it

      if (!_this3.cache[version]) {
        const downloader = new _MongoBinaryDownload.default({
          downloadDir,
          platform,
          arch,
          version
        });
        downloader.debug = _this3.debug;
        _this3.cache[version] = yield downloader.getMongodPath();
      } // remove lock


      _lockfile.default.unlock(lockfile, err => {
        _this3.debug(err ? `MongoBinary: Error when removing download lock ${err}` : `MongoBinary: Download lock removed`);
      });

      return _this3.cache[version];
    })();
  }

  static getPath(opts = {}) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      var _process$env, _process$env2, _process$env3, _process$env4, _process$env5;

      const legacyDLDir = _path.default.resolve(_os.default.homedir(), '.mongodb-binaries');

      const defaultOptions = {
        downloadDir: ((_process$env = process.env) === null || _process$env === void 0 ? void 0 : _process$env.MONGOMS_DOWNLOAD_DIR) || (_fs.default.existsSync(legacyDLDir) ? legacyDLDir : _path.default.resolve((0, _findCacheDir.default)({
          name: 'mongodb-memory-server',
          // if we're in postinstall script, npm will set the cwd too deep
          cwd: new RegExp(`node_modules${_path.default.sep}mongodb-memory-server$`).test(process.cwd()) ? _path.default.resolve(process.cwd(), '..', '..') : process.cwd()
        }), 'mongodb-binaries')),
        platform: ((_process$env2 = process.env) === null || _process$env2 === void 0 ? void 0 : _process$env2.MONGOMS_PLATFORM) || _os.default.platform(),
        arch: ((_process$env3 = process.env) === null || _process$env3 === void 0 ? void 0 : _process$env3.MONGOMS_ARCH) || _os.default.arch(),
        version: ((_process$env4 = process.env) === null || _process$env4 === void 0 ? void 0 : _process$env4.MONGOMS_VERSION) || LATEST_VERSION,
        systemBinary: (_process$env5 = process.env) === null || _process$env5 === void 0 ? void 0 : _process$env5.MONGOMS_SYSTEM_BINARY,
        debug: typeof process.env.MONGOMS_DEBUG === 'string' ? ['1', 'on', 'yes', 'true'].indexOf(process.env.MONGOMS_DEBUG.toLowerCase()) !== -1 : false
      };

      if (opts.debug) {
        if (typeof opts.debug === 'function' && opts.debug.apply && opts.debug.call) {
          _this4.debug = opts.debug;
        } else {
          _this4.debug = console.log.bind(null);
        }
      } else {
        _this4.debug = msg => {}; // eslint-disable-line

      }

      const options = _objectSpread({}, defaultOptions, opts);

      _this4.debug(`MongoBinary options: ${JSON.stringify(options)}`);

      const version = options.version,
            systemBinary = options.systemBinary;
      let binaryPath = '';

      if (systemBinary) {
        binaryPath = yield _this4.getSystemPath(systemBinary);

        if (binaryPath) {
          const binaryVersion = (0, _child_process.execSync)(`${binaryPath} --version`).toString().split('\n')[0].split(' ')[2];

          if (version !== LATEST_VERSION && version !== binaryVersion) {
            // we will log the version number of the system binary and the version requested so the user can see the difference
            _this4.debug(_dedent.default`
            MongoMemoryServer: Possible version conflict
              SystemBinary version: ${binaryVersion}
              Requested version:    ${version}

              Using SystemBinary!
          `);
          }
        }
      }

      if (!binaryPath) {
        binaryPath = yield _this4.getCachePath(version);
      }

      if (!binaryPath) {
        binaryPath = yield _this4.getDownloadPath(options);
      }

      _this4.debug(`MongoBinary: Mongod binary path: ${binaryPath}`);

      return binaryPath;
    })();
  }

  static hasValidBinPath(files) {
    if (files.length === 1) {
      return true;
    } else if (files.length > 1) {
      return false;
    }

    return false;
  }

}

exports.default = MongoBinary;

_defineProperty(MongoBinary, "cache", {});

_defineProperty(MongoBinary, "debug", void 0);