"use strict";

var _tmp = _interopRequireDefault(require("tmp"));

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _MongoBinary = _interopRequireWildcard(require("../MongoBinary"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const MongoBinaryDownload = require('../MongoBinaryDownload');

_tmp.default.setGracefulCleanup();

jasmine.DEFAULT_TIMEOUT_INTERVAL = 600000;
const mockGetMongodPath = jest.fn().mockResolvedValue('/temp/path');
jest.mock('../MongoBinaryDownload', () => {
  return jest.fn().mockImplementation(() => {
    return {
      getMongodPath: mockGetMongodPath
    };
  });
});
describe('MongoBinary', () => {
  let tmpDir;
  beforeEach(() => {
    tmpDir = _tmp.default.dirSync({
      prefix: 'mongo-mem-bin-',
      unsafeCleanup: true
    });
  }); // cleanup

  afterEach(() => {
    tmpDir.removeCallback();
    MongoBinaryDownload.mockClear();
    mockGetMongodPath.mockClear();
    _MongoBinary.default.cache = {};
  });
  describe('getPath', () => {
    it('should get system binary from the environment',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const accessSpy = jest.spyOn(_fs.default, 'access');
      process.env.MONGOMS_SYSTEM_BINARY = '/usr/local/bin/mongod';
      yield _MongoBinary.default.getPath();
      expect(accessSpy).toHaveBeenCalledWith('/usr/local/bin/mongod', expect.any(Function));
      accessSpy.mockClear();
    }));
  });
  describe('getDownloadPath', () => {
    it('should download binary and keep it in cache',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      // download
      const version = _MongoBinary.LATEST_VERSION;
      const binPath = yield _MongoBinary.default.getPath({
        downloadDir: tmpDir.name,
        version
      }); // eg. /tmp/mongo-mem-bin-33990ScJTSRNSsFYf/mongodb-download/a811facba94753a2eba574f446561b7e/mongodb-macOS-x86_64-3.5.5-13-g00ee4f5/

      expect(MongoBinaryDownload).toHaveBeenCalledWith({
        downloadDir: tmpDir.name,
        platform: _os.default.platform(),
        arch: _os.default.arch(),
        version
      });
      expect(mockGetMongodPath).toHaveBeenCalledTimes(1);
      expect(_MongoBinary.default.cache[version]).toBeDefined();
      expect(_MongoBinary.default.cache[version]).toEqual(binPath);
    }));
  });
  describe('getCachePath', () => {
    it('should get the cache',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      _MongoBinary.default.cache['3.4.2'] = '/bin/mongod';
      yield expect(_MongoBinary.default.getCachePath('3.4.2')).resolves.toEqual('/bin/mongod');
    }));
  });
  describe('getSystemPath', () => {
    it('should use system binary if option is passed.',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const accessSpy = jest.spyOn(_fs.default, 'access');
      yield _MongoBinary.default.getSystemPath('/usr/bin/mongod');
      expect(accessSpy).toHaveBeenCalledWith('/usr/bin/mongod', expect.any(Function));
      accessSpy.mockClear();
    }));
  });
});