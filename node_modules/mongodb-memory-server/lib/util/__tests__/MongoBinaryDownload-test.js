"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _md5File = _interopRequireDefault(require("md5-file"));

var _MongoBinaryDownload = _interopRequireDefault(require("../MongoBinaryDownload"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

jest.mock('fs');
jest.mock('md5-file');
describe('MongoBinaryDownload', () => {
  afterEach(() => {
    delete process.env.MONGOMS_SKIP_MD5_CHECK;
  });
  it('checkMD5 attribute can be set via constructor parameter', () => {
    expect(new _MongoBinaryDownload.default({
      checkMD5: true
    }).checkMD5).toBe(true);
    expect(new _MongoBinaryDownload.default({
      checkMD5: false
    }).checkMD5).toBe(false);
  });
  it(`if checkMD5 input parameter is missing, then it checks 
MONGOMS_MD5_CHECK environment variable`, () => {
    expect(new _MongoBinaryDownload.default({}).checkMD5).toBe(false);
    process.env.MONGOMS_MD5_CHECK = '1';
    expect(new _MongoBinaryDownload.default({}).checkMD5).toBe(true);
  });
  it('should use direct download',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    process.env['yarn_https-proxy'] = '';
    process.env.yarn_proxy = '';
    process.env['npm_config_https-proxy'] = '';
    process.env.npm_config_proxy = '';
    process.env.https_proxy = '';
    process.env.http_proxy = '';
    const du = new _MongoBinaryDownload.default({}); // $FlowFixMe

    du.httpDownload = jest.fn();
    yield du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz');
    expect(du.httpDownload).toHaveBeenCalledTimes(1);
    const callArg1 = du.httpDownload.mock.calls[0][0];
    expect(callArg1.agent).toBeUndefined();
  }));
  it('should pick up proxy from env vars',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    process.env['yarn_https-proxy'] = 'http://user:pass@proxy:8080';
    const du = new _MongoBinaryDownload.default({}); // $FlowFixMe

    du.httpDownload = jest.fn();
    yield du.download('https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-3.6.3.tgz');
    expect(du.httpDownload).toHaveBeenCalledTimes(1);
    const callArg1 = du.httpDownload.mock.calls[0][0];
    expect(callArg1.agent).toBeDefined();
    expect(callArg1.agent.options.href).toBe('http://user:pass@proxy:8080/');
  }));
  it(`makeMD5check returns true if md5 of downloaded mongoDBArchive is
the same as in the reference result`, () => {
    const someMd5 = 'md5';

    _fs.default.readFileSync.mockImplementationOnce(() => `${someMd5} fileName`);

    _md5File.default.sync.mockImplementationOnce(() => someMd5);

    const mongoDBArchivePath = '/some/path';
    const fileWithReferenceMd5 = '/another/path';
    const du = new _MongoBinaryDownload.default({}); // $FlowFixMe

    du.download = jest.fn(() => Promise.resolve(fileWithReferenceMd5));
    const urlToMongoDBArchivePath = 'some-url';
    du.checkMD5 = true;
    return du.makeMD5check(urlToMongoDBArchivePath, mongoDBArchivePath).then(res => {
      expect(res).toBe(true);
      expect(du.download).toBeCalledWith(urlToMongoDBArchivePath);
      expect(_fs.default.readFileSync).toBeCalledWith(fileWithReferenceMd5);
      expect(_md5File.default.sync).toBeCalledWith(mongoDBArchivePath);
    });
  });
  it(`makeMD5check throws an error if md5 of downloaded mongoDBArchive is NOT
  the same as in the reference result`, () => {
    _fs.default.readFileSync.mockImplementationOnce(() => 'someMd5 fileName');

    _md5File.default.sync.mockImplementationOnce(() => 'anotherMd5');

    const du = new _MongoBinaryDownload.default({});
    du.checkMD5 = true; // $FlowFixMe

    du.download = jest.fn(() => Promise.resolve(''));
    expect(du.makeMD5check('', '')).rejects.toMatchInlineSnapshot(`[Error: MongoBinaryDownload: md5 check is failed]`);
  });
  it('false value of checkMD5 attribute disables makeMD5check validation', () => {
    expect.assertions(1);

    _fs.default.readFileSync.mockImplementationOnce(() => 'someMd5 fileName');

    _md5File.default.sync.mockImplementationOnce(() => 'anotherMd5');

    const du = new _MongoBinaryDownload.default({});
    du.checkMD5 = false;
    return du.makeMD5check('', '').then(res => {
      expect(res).toBe(undefined);
    });
  });
});